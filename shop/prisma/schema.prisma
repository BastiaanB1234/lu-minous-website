// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// Product Categories
model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  imageUrl    String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("categories")
}

// Products
model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String
  shortDescription String?
  price       Decimal  @db.Decimal(10, 2)
  comparePrice Decimal? @db.Decimal(10, 2)
  stock       Int      @default(0)
  weight      Decimal? @db.Decimal(8, 3) // in grams
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  imageUrl    String?
  gallery     String[] // Array of image URLs
  tags        String[] // Array of tags
  featured    Boolean  @default(false)
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orderItems  OrderItem[]

  @@map("products")
}

// Customers
model Customer {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  phone     String?
  address   Address?
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("customers")
}

// Address
model Address {
  id         String   @id @default(cuid())
  customerId String   @unique
  customer   Customer @relation(fields: [customerId], references: [id])
  street     String
  city       String
  state      String?
  postalCode String
  country    String   @default("Netherlands")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("addresses")
}

// Orders
model Order {
  id           String      @id @default(cuid())
  orderNumber  String      @unique
  customerId   String
  customer     Customer    @relation(fields: [customerId], references: [id])
  status       OrderStatus @default(PENDING)
  totalAmount  Decimal     @db.Decimal(10, 2)
  subtotal     Decimal     @db.Decimal(10, 2)
  taxAmount    Decimal     @db.Decimal(10, 2)
  shippingAmount Decimal   @db.Decimal(10, 2)
  orderItems   OrderItem[]
  notes        String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("orders")
}

// Order Items
model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  total     Decimal @db.Decimal(10, 2)

  @@map("order_items")
}

// Order Status Enum
enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}
